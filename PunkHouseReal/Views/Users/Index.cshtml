@model PunkHouseReal.Models.ItemViewModel<PunkHouseReal.Domain.HouseMate>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div ng-controller="meController as me">

    <h1>Hello {{me.user.firstName}} {{me.user.lastName}} of {{me.house.name}}</h1>

    <h3>My Housemates are:</h3>
    <div ng-repeat="hm in me.houseMates">
        <p>{{hm.firstName}} {{hm.lastName}}</p>
    </div>
    <hr />

    <h4>House Expenses</h4>
    <div ng-repeat="expense in me.houseExpenses">
        <p> {{$index + 1}}. <b>{{expense.houseMate.firstName}}</b> added: {{expense.name}}: {{expense.description}}. Added: {{expense.dateCreated | date}}</p>
        <p>Total: {{expense.total | currency}}, Due: {{expense.dueDate | date}}. Has everyone paid? - {{expense.isPaid}} </p>

    </div>
    <hr />
    <h4>My Expenses</h4>
    <div>
        <button class="btn btn-success" ng-click="me.onMyExpensesClick()">See the Expenses I need to pay!</button>
        <div>
            <ol>
                <li ng-repeat="hme in me.myExpenses">
                {{hme.expense.name}}: {{hme.total | currency}}, Due: {{hme.expense.dueDate | date}} <span ng-show="hme.isMarkedPaid">--- <i>marked paid... awaiting received payment confirmation</i> :)</span>
                    <div ng-show="!hme.isMarkedPaid">
                        <button class="btn btn-warning" ng-click="me.onMarkPaidClick(hme)">mark paid?</button>
                    </div>
                </li>
            </ol>
        </div>
    </div>

    <hr />
    <button class="btn btn-success" ng-click="me.onExpensesOwedClick()">See the Expenses motherflowers owe me!</button>
    <div>
        <div>
            <ol>
                <li ng-repeat="hme in me.expensesOwedMe" ng-hide="hme.isPaid">
                    {{hme.houseMate.firstName}} owes {{hme.total | currency}} for {{hme.expense.name}}, Due: {{hme.expense.dueDate | date}}
                    <span ng-show="hme.isMarkedPaid">
                        this is marked paid! <button class="btn btn-warning" ng-click="me.onConfirmPaidClick(hme)">confirm payment received! </button>
                    </span>
                </li>
            </ol>
        </div>
    </div>

    <form name="house.createHouse" ng-submit="me.onCreateExpense()" novalidate>
        <div class="form-group">
            <label for="">Expense name:</label>
            <input type="text" class="form-control" id="expenseName" ng-maxlength="30" ng-model="me.expenseData.name" required>
        </div>
        <div class="form-group">
            <label for="">Type:</label>
            <select ng-model="me.expenseData.expenseType" ng-options="type for type in me.expenseTypes" required></select>
        </div>
        <div class="form-group">
            <label for="">Description:</label>
            <input type="text" class="form-control" id="expenseDescription" ng-maxlength="50" ng-model="me.expenseData.description">
        </div>
        <div class="form-group">
            <label for="">Total:</label>
            <input type="text" class="form-control" id="expenseTotal" ng-model="me.expenseData.total" required>
        </div>
        <div class="form-group">
            <input type="checkbox" id="expenseDivideCheckbox" ng-model="me.expenseData.isDividedUnevenly">
            <label for="">Divide payment unevenly amongst housemates?</label>
        </div>
        <div ng-show="me.expenseData.isDividedUnevenly">
            <h6>Leave blank for housemates that don't owe anything</h6>
            <div class="form-group" ng-repeat="hm in me.houseMates">
                <label for="">{{hm.firstName}} owes:</label>
                <input type="text" class="form-control" ng-model="me.unevenTotals[hm.id]">
            </div>
        </div>

        <div class="form-group">
            <label for="">Due Date:</label>
            <input type="date" class="form-control" id="expenseDueDate" ng-model="me.expenseData.dueDate">
        </div>

        <button type="submit" class="btn btn-success">{{me.submitExpense}}</button>
    </form>

</div>

@section Scripts { 

<script src="~/js/houseService.js"></script>
<script src="~/js/houseMateService.js"></script>
<script src="~/js/expenseService.js"></script>

<script>
    (function () {
        "use strict";

        angular.module("app").controller("meController", MeController);
        //inject
        MeController.$inject = ["houseService", "houseMateService", "expenseService"];

        function MeController(houseService, houseMateService, expenseService) {

            var vm = this;
            vm.houseService = houseService;
            //currently not being used
            vm.houseMateService = houseMateService;
            vm.expenseService = expenseService;

            vm.user = @Json.Serialize(Model.Item);
            vm.expenseTypes = ["Rent", "Bill", "Supply", "Other"];
            vm.submitExpense = "Submit";
            vm.isDividedUnevenly = false;
            vm.unevenTotals = {};

            vm.onCreateExpense = _onCreateExpense;
            vm.onMyExpensesClick = _onMyExpensesClick;
            vm.onMarkPaidClick = _onMarkPaidClick;
            vm.onExpensesOwedClick = _onExpensesOwedClick;
            vm.onConfirmPaidClick = _onConfirmPaidClick;


            render();
            function render() {
                //console.log(vm.user);
                vm.houseService.getExpenses(vm.user.houseId).then(_onGetHouseExpensesSuccess, _onGetHouseExpensesError);

            }

            // -------------------- form submits ----------------------
            function _onCreateExpense() {

                //firat check if expense is divided unevenly, and divided correctly
                var isDividedEvenly = angular.equals(vm.unevenTotals, {});
                if (!isDividedEvenly && !isCorrectSum(vm.expenseData.total, vm.unevenTotals)) {
                    //FIX ME with UI messaging
                    console.log("Sum is not equal to total expense value");
                    return;
                }
                //then build expense data object
                vm.expenseData.creatorId = vm.user.id;
                vm.expenseData.houseId = vm.user.houseId;
                vm.expenseData.unevenTotals = vm.unevenTotals;

                vm.expenseService.create(vm.expenseData).then(_onCreateExpenseSuccess, _onCreateExpenseError);
            }

            //--------------- click handlers ---------------------
            function _onMyExpensesClick() {
                vm.houseMateService.getHouseMateExpenses(vm.user.id).then(_onGetHouseMateExpensesSuccess, _onGetHouseMateExpensesError);
                console.log(vm.myExpenses);
            }

            function _onMarkPaidClick(expense) {

                console.log(expense);

                if (!expense.isMarkedPaid) {
                    //this updates the UI before getting success from the server.... no bueno!
                    expense.isMarkedPaid = true;
                    vm.houseMateService.updateHouseMateExpense(vm.user.id, expense.expenseId, expense).then(_onUpdateHouseMateExpenseSuccess, _onUpdateHouseMateExpenseError);
                }
            }

            function _onExpensesOwedClick() {
                vm.houseMateService.getHouseMateExpensesOwed(vm.user.id, vm.user.id).then(_onGetHouseMateExpensesOwedSuccess, _onGetHouseMateExpensesOwedError);

            }

            function _onConfirmPaidClick(houseMateExpense) {
                //Updates UI before success from server :/
                houseMateExpense.isPaid = true;
                vm.houseMateService.updateHouseMateExpense(houseMateExpense.houseMate.id, houseMateExpense.expenseId, houseMateExpense).then(_onUpdateHouseMateExpenseSuccess, _onUpdateHouseMateExpenseError);

            }

            // ------------ helper functions ----------------
            function isCorrectSum(total, individualTotalsObj) {
                var sum = 0;
                for (var key in individualTotalsObj) {
                    var value = individualTotalsObj[key];
                    var valueAsInt = parseInt(value)
                    sum += valueAsInt;
                }
                return total == sum;
            }

            //------------------ Ajax responses ----------------------

            function _onCreateExpenseSuccess(response) {
                console.log("Success adding expense!");
                console.log(response);
            }

            function _onCreateExpenseError() {
                console.log("Error creating expense");

            }

            function _onUpdateHouseMateExpenseSuccess(response) {
                console.log("_onUpdateHouseMateExpenseSuccess");
                console.log(response);
            }

            function _onUpdateHouseMateExpenseError() {
                console.log("Error updating HouseMateExpense");
            }

            function _onGetHouseExpensesSuccess(response) {
                console.log("my houses' expenses");
                console.log(response);

                vm.houseExpenses = response.data.expenses;
                vm.house = response.data;
                vm.houseMates = response.data.houseMates;

            }

            function _onGetHouseExpensesError() {
                console.log("error");
            }

            function _onGetHouseMateExpensesSuccess(response) {
                console.log("_onGetHouseMateExpensesSuccess");
                console.log(response);
                vm.myExpenses = response.data;
            }

            function _onGetHouseMateExpensesError() {
                console.log("error _onGetHouseMateExpensesError");

            }

            function _onGetHouseMateExpensesOwedSuccess(response) {
                console.log("_onGetHouseMateExpensesOwedSuccess");
                console.log(response);
                vm.expensesOwedMe = response.data;
            }

            function _onGetHouseMateExpensesOwedError() {
                console.log("error _onGetHouseMateExpensesOwedError ");

            }
        }

     }());
</script>
}
