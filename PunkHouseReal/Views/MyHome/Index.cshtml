@model PunkHouseReal.Models.ItemViewModel<PunkHouseReal.Domain.HouseMate>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div ng-controller="meController as me">

    <h1>Hello {{me.user.firstName}} {{me.user.lastName}} of {{me.house.name}}</h1>

    <h3>My Housemates are:</h3>
    <div ng-repeat="hm in me.house.houseMates">
        <p>{{hm.firstName}} {{hm.lastName}}</p>
    </div>
    <hr />

    <h4>House Expenses</h4>
    <div ng-repeat="expense in me.house.expenses">
        <p> {{$index + 1}}. <b>{{expense.houseMate.firstName}}</b> added: {{expense.name}}: {{expense.description}}. Added: {{expense.dateCreated | date}}</p>
        <p>Total: {{expense.total | currency}}, Due: {{expense.dueDate | date}}. Has everyone paid? - {{expense.isPaid}} </p>

    </div>
    <hr />
    <h4>My Expenses</h4>
    <div>
        <button class="btn btn-success" ng-click="me.onSeeMyExpensesClick()">See the Expenses I need to pay!</button>
        <div>
            <ol>
                <li ng-repeat="hme in me.myExpenses">
                {{hme.expense.name}}: {{hme.total | currency}}, Due: {{hme.expense.dueDate | date}} <span ng-show="hme.isMarkedPaid">--- <i>marked paid... awaiting received payment confirmation</i> :)</span>
                    <div ng-show="!hme.isMarkedPaid">
                        <button class="btn btn-warning" ng-click="me.onMarkPaidClick(hme)">mark paid?</button>
                    </div>
                </li>
            </ol>
        </div>
    </div>

    <hr />
    <button class="btn btn-success" ng-click="me.onExpensesOwedClick()">See the Expenses motherflowers owe me!</button>
    <div>
        <div>
            <ol>
                <li ng-repeat="hme in me.expensesOwedMe" ng-hide="hme.isPaid">
                    {{hme.houseMate.firstName}} owes {{hme.total | currency}} for {{hme.expense.name}}, Due: {{hme.expense.dueDate | date}}
                    <span ng-show="hme.isMarkedPaid">
                        this is marked paid! <button class="btn btn-warning" ng-click="me.onConfirmPaidClick(hme)">confirm payment received! </button>
                    </span>
                </li>
            </ol>
        </div>
    </div>

    <form name="house.createHouse" ng-submit="me.onCreateExpense()" novalidate>
        <div class="form-group">
            <label for="">Expense name:</label>
            <input type="text" class="form-control" id="expenseName" ng-maxlength="30" ng-model="me.expenseData.name" required>
        </div>
        <div class="form-group">
            <label for="">Type:</label>
            <select ng-model="me.expenseData.expenseType" ng-options="type for type in me.expenseTypes" required></select>
        </div>
        <div class="form-group">
            <label for="">Description:</label>
            <input type="text" class="form-control" id="expenseDescription" ng-maxlength="50" ng-model="me.expenseData.description">
        </div>
        <div class="form-group">
            <label for="">Total:</label>
            <input type="text" class="form-control" id="expenseTotal" ng-model="me.expenseData.total" required>
        </div>
        <div class="form-group">
            <input type="checkbox" id="expenseDivideCheckbox" ng-model="me.expenseData.isDividedUnevenly">
            <label for="">Divide payment unevenly amongst housemates?</label>
        </div>
        <div ng-show="me.expenseData.isDividedUnevenly">
            <h6>Leave blank for housemates that don't owe anything</h6>
            <div class="form-group" ng-repeat="hm in me.house.houseMates">
                <label for="">{{hm.firstName}} owes:</label>
                <input type="text" class="form-control" ng-model="me.unevenTotals[hm.id]">
            </div>
        </div>

        <div class="form-group">
            <label for="">Due Date:</label>
            <input type="date" class="form-control" id="expenseDueDate" ng-model="me.expenseData.dueDate">
        </div>

        <button type="submit" class="btn btn-success">{{me.submitExpense}}</button>
    </form>

</div>

@section Scripts { 

<script src="~/js/app/services/houseService.js"></script>
<script src="~/js/app/services/houseMateService.js"></script>
<script src="~/js/app/services/expenseService.js"></script>

<script>
    (function () {
        "use strict";

        angular.module("app").controller("meController", MeController);
        //inject
        MeController.$inject = ["houseService", "houseMateService", "expenseService"];

        function MeController(houseService, houseMateService, expenseService) {

            var vm = this;

            vm.user = @Json.Serialize(Model.Item);
            vm.expenseTypes = ["Rent", "Bill", "Supply"]; //PunkHouseReal.Models.EnumsAndConstants.ExpenseType.Bill
            vm.submitExpense = "Submit";
            vm.isDividedUnevenly = false;
            vm.unevenTotals = {};
            vm.house = [];
            vm.myExpenses = [];
            vm.expensesOwedMe = [];

            //click handlers
            vm.onCreateExpense = _onCreateExpense;
            vm.onSeeMyExpensesClick = _onSeeMyExpensesClick;
            vm.onMarkPaidClick = _onMarkPaidClick;
            vm.onExpensesOwedClick = _onExpensesOwedClick;
            vm.onConfirmPaidClick = _onConfirmPaidClick;


            render();
            function render() {
                return getHouseExpenses().then(function () {
                    // logger?
                });
            }

            // -------------------- form submits ----------------------
            function _onCreateExpense() {

                //first check if expense is divided unevenly, and divided correctly
                var isDividedEvenly = angular.equals(vm.unevenTotals, {});
                if (!isDividedEvenly && !isCorrectSum(vm.expenseData.total, vm.unevenTotals)) {
                    //FIX ME with UI messaging
                    console.log("Sum is not equal to total expense value");
                    return;
                }
                //then build expense data object
                vm.expenseData.creatorId = vm.user.id;
                vm.expenseData.houseId = vm.user.houseId;
                vm.expenseData.unevenTotals = vm.unevenTotals;

                return createExpense(vm.expenseData).then(function (data) {
                    // logger?
                })
            }

            //--------------- click handlers ---------------------
            function _onSeeMyExpensesClick() {
                var filtersData = {
                    isPaid: false
                };

                return getHouseMateExpenses(vm.user.id, filtersData)
                    .then(function (data) {
                        //logger?
                    });

            }

            function _onMarkPaidClick(hme) {

                console.log(hme);

                if (!hme.isMarkedPaid) {
                    //FIX ME: this updates the UI before getting success from the server.... no bueno!
                    hme.isMarkedPaid = true;

                    return updateHouseMateExpense(vm.user.id, hme.expenseId, hme)
                        .then(function (data) {
                            // logger?
                        });
                }
            }

            function _onExpensesOwedClick() {
                var filtersData = {
                    creatorId: vm.user.id,
                    isPaid: false
                }
                
                return getHouseMateExpensesOwed(vm.user.id, filtersData)
                    .then(function (data) {
                        // logger?
                    });
            }

            function _onConfirmPaidClick(hme) {
                //FIX ME: Updates UI before success from server :/
                hme.isPaid = true;

                return updateHouseMateExpense(hme.houseMate.id, hme.expenseId, hme)
                    .then(function (data) {
                        //logger?
                    });

            }

            // ------------ helper functions ----------------
            function isCorrectSum(total, individualTotalsObj) {
                var sum = 0;
                for (var key in individualTotalsObj) {
                    var value = individualTotalsObj[key];
                    var valueAsInt = parseInt(value)
                    sum += valueAsInt;
                }
                return total == sum;
            }

            //--------------- service call functions ---------------

            //houseService
            function getHouseExpenses() {
                return houseService.getExpenses(vm.user.houseId)
                    .then(function (data) {
                        vm.house = data;
                        return vm.house;
                    });
            }

            //houseMateService
            function getHouseMateExpenses(houseMateId, filtersData) {
                return houseMateService.getHouseMateExpenses(houseMateId, filtersData)
                    .then(function (data) {
                        vm.myExpenses = data;
                        return vm.myExpenses;
                    });
            }

            //this seems non-DRY.... im making a whole other function to populate a different object returned from a different filter response..
            function getHouseMateExpensesOwed(houseMateId, filtersData) {
                return houseMateService.getHouseMateExpenses(houseMateId, filtersData)
                    .then(function (data) {
                        vm.expensesOwedMe = data;
                        return vm.expensesOwedMe;
                    });

            }

            function updateHouseMateExpense(houseMateId, houseMateExpenseId, houseMateExpense) {
                return houseMateService.updateHouseMateExpense(houseMateId, houseMateExpenseId, houseMateExpense)
                    .then(function (data) {
                        return data;
                    });

            }

            //expenseService
            function createExpense(expenseData) {
                return expenseService.create(expenseData)
                    .then(function (data) {
                        return data;
                    });
            }

        }

     }());
</script>
}
