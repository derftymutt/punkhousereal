@model PunkHouseReal.Models.ItemViewModel<PunkHouseReal.Domain.HouseMate>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>

        /*SETUP STYLES*/
        .grid-container {
            display: grid;
            grid-template-columns: 150px 1fr 3fr 150px;
            grid-template-rows: 1fr 3fr;
            grid-gap: 20px;
            grid-template-areas: 
                "...... nav nav ......" 
                "...... sidebar main ......";
        }

        nav {
            grid-area: nav;
            grid-template-columns: 1fr 1fr;
            
        }

        aside {
            grid-area: sidebar;
            display: flex;
            justify-content: center;
            grid-template-columns: 1fr;
            background-color: #fff;
            border-radius: 8px;
            border: 1px solid #E0E0E0;
            padding-bottom: 80px;
            padding-top: 20px;
        }

        main {
            grid-area: main;
            grid-template-columns: 3fr;
            background-color: #fff;
            border-radius: 8px;
            border: 1px solid #E0E0E0;
            padding: 10px;
        }

        .button {
            padding: 8px 15px;
            background-color: #84db2e;
            color: #fff;
            border: 1px solid #fff;
            border-radius: 8px;
        }

        /* SETUP STYLES END */

         /* NAV */
        .nav-myhome-flex-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #022307;
        }

        .nav-myThings {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .nav-myThings li{
            display: inline-block;
            font-size: 16px;
            padding-right: 15px;
        }

        .nav-myThings li a {
            padding: 0 1.25em 0 1.25em
         }

        .nav-myThings li a:hover{
            color:darkred;
        }

        .icon {
            border: 1px solid black;
            border-radius: 50%;
            display: block;
            background: white;
            height: 72px;
            width: 72px;
        }

        .nav-welcome {
            display:flex;
            align-items: center;
        }

        .nav-welcome img {
            max-height: 100px;
            max-width: 100px;
            padding-right: 10px;
        }

        /*NAV END*/

        /*SIDEBAR*/

        .sidebar-nav-container {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
        }

        sidebar-nav-container li {
            padding: 3px;
        }

        .icon-sidebar {
            border: 1px solid black;
            background-color: wheat;
            height: 50px;
            width: 50px;
            display: inline-block;
        }

        .sidebar-item-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .sidebar-text{
            width: 80px;
            padding-left: 5px;
        }

        /* SIDEBAR END */

        /* MAIN */

        .house-container {
            padding: 5px;
        }

        .housemates-list {
            padding: 5px 5px 0px 0px;
            
        }

        .house-overview-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .house-expenses-table-title {
            display: flex;
            justify-content: start;
            align-items: center;
        }

        .house-expenses-table-title h2 {
            padding-right:15px;
        }

        .house-expenses-table {
            display: table;
            border-spacing: 10px;
        }

        .Table-row-item-header {
            font-weight: bold;
        }

        .house-expense-table-row{
            display: table-row;
        }

        .Table-row-item {
            display: table-cell;
        }

        .odd {
            background-color: lightgray;
        }

        /*MAIN END*/

    </style>
}

<div class="grid-container" ng-controller="myHouseController as myHouse">

    <nav class="nav-myhome-flex-container">
        <div class="nav nav-welcome">
            <img src="http://www.kentowin.com/assets/tutor_images/fnoimage.jpg" alt="" />
            <h1>Hi {{myHouse.user.firstName}}</h1>
        </div>
        <div>
            <ul class="nav nav-myThings">
                <li><a href="#"><span class="icon"><i class="fas fa-bed"></i></span><span>My House</span></a></li>
                <li><a href="#"><span class="icon"></span><span>My Expenses</span></a></li>
                <li><a href="#"><span class="icon"></span><span>My Events</span></a></li>
                <li><a href="#"><span class="icon"></span><span>My Ideas</span></a></li>
                <li><a href="#"><span class="icon"></span><span>My Calendar</span></a></li>
            </ul>
        </div>
    </nav>

    <aside>
        <ul class="sidebar-nav-container">
            <li class="sidebar-item">
                <a href="#">
                    <div class="sidebar-item-container">
                        <span class="icon-sidebar"></span>
                        <div class="sidebar-text">
                            <span>House Expenses</span>
                        </div>
                    </div>
                </a>
            </li>
            <li class="sidebar-item">
                <a href="#">
                    <div class="sidebar-item-container">
                        <span class="icon-sidebar"></span>
                        <div class="sidebar-text">
                            <span>House Events</span>
                        </div>
                    </div>
                </a>
            </li>
            <li class="sidebar-item">
                <a href="#">
                    <div class="sidebar-item-container">
                        <span class="icon-sidebar"></span>
                        <div class="sidebar-text">
                            <span>House Ideas</span>
                        </div>
                    </div>
                </a>
            </li>
            <li class="sidebar-item">
                <a href="#">
                    <div class="sidebar-item-container">
                        <span class="icon-sidebar"></span>
                        <div class="sidebar-text">
                            <span>House Calendar</span>
                        </div>
                    </div>
                </a>
            </li>
        </ul>
    </aside>
    <main>
        <div class="house-container">
            <div class="house-overview-container">
                <div>
                    <h2>{{myHouse.house.name}}</h2>
                </div>
                <div>
                    <ul class="housemates-list" ng-repeat="hm in myHouse.house.houseMates">
                        <li><a href="#">{{hm.firstName}} {{hm.lastName}}</a></li>
                    </ul>
                </div>
            </div>
            <hr />
            <div class="house-expenses-table-title">
                <h2>House Expenses</h2>
                <button class="button" ng-click="myHouse.onAddExpenseClick()">Add Expense </button>
            </div>
            <div class="house-expenses-table">
                <div class="house-expense-table-row house-expense-table-header">
                    <div class="Table-row-item Table-row-item-header">#</div>
                    <div class="Table-row-item Table-row-item-header">Name</div>
                    <div class="Table-row-item Table-row-item-header">Total</div>
                    <div class="Table-row-item Table-row-item-header">Due</div>
                    <div class="Table-row-item Table-row-item-header">Added by</div>
                    <div class="Table-row-item Table-row-item-header">Added on</div>
                </div>
                <div class="house-expense-table-row" ng-class-odd="'odd'" ng-repeat="expense in myHouse.house.expenses">
                    <div class="Table-row-item">{{$index + 1}}</div>
                    <div class="Table-row-item">{{expense.name}}</div>
                    <div class="Table-row-item">{{expense.total | currency}}</div>
                    <div class="Table-row-item">{{expense.dueDate | date}}</div>
                    <div class="Table-row-item">{{expense.houseMate.firstName}}</div>
                    <div class="Table-row-item">{{expense.dateCreated | date}}</div>
                </div>
            </div>
        </div>
    </main>


    @*
    <h4>My Expenses</h4>
    <div>
        <button class="btn btn-success" ng-click="me.onSeeMyExpensesClick()">See the Expenses I need to pay!</button>
        <div>
            <ol>
                <li ng-repeat="hme in me.myExpenses">
                {{hme.expense.name}}: {{hme.total | currency}}, Due: {{hme.expense.dueDate | date}} <span ng-show="hme.isMarkedPaid">--- <i>marked paid... awaiting received payment confirmation</i> :)</span>
                    <div ng-show="!hme.isMarkedPaid">
                        <button class="btn btn-warning" ng-click="me.onMarkPaidClick(hme)">mark paid?</button>
                    </div>
                </li>
            </ol>
        </div>
    </div>

    <hr />
    <button class="btn btn-success" ng-click="me.onExpensesOwedClick()">See the Expenses motherflowers owe me!</button>
    <div>
        <div>
            <ol>
                <li ng-repeat="hme in me.expensesOwedMe" ng-hide="hme.isPaid">
                    {{hme.houseMate.firstName}} owes {{hme.total | currency}} for {{hme.expense.name}}, Due: {{hme.expense.dueDate | date}}
                    <span ng-show="hme.isMarkedPaid">
                        this is marked paid! <button class="btn btn-warning" ng-click="me.onConfirmPaidClick(hme)">confirm payment received! </button>
                    </span>
                </li>
            </ol>
        </div>
    </div>

    <form name="house.createHouse" ng-submit="me.onCreateExpense()" novalidate>
        <div class="form-group">
            <label for="">Expense name:</label>
            <input type="text" class="form-control" id="expenseName" ng-maxlength="30" ng-model="me.expenseData.name" required>
        </div>
        <div class="form-group">
            <label for="">Type:</label>
            <select ng-model="me.expenseData.expenseType" ng-options="type for type in me.expenseTypes" required></select>
        </div>
        <div class="form-group">
            <label for="">Description:</label>
            <input type="text" class="form-control" id="expenseDescription" ng-maxlength="50" ng-model="me.expenseData.description">
        </div>
        <div class="form-group">
            <label for="">Total:</label>
            <input type="text" class="form-control" id="expenseTotal" ng-model="me.expenseData.total" required>
        </div>
        <div class="form-group">
            <input type="checkbox" id="expenseDivideCheckbox" ng-model="me.expenseData.isDividedUnevenly">
            <label for="">Divide payment unevenly amongst housemates?</label>
        </div>
        <div ng-show="me.expenseData.isDividedUnevenly">
            <h6>Leave blank for housemates that don't owe anything</h6>
            <div class="form-group" ng-repeat="hm in me.house.houseMates">
                <label for="">{{hm.firstName}} owes:</label>
                <input type="text" class="form-control" ng-model="me.unevenTotals[hm.id]">
            </div>
        </div>

        <div class="form-group">
            <label for="">Due Date:</label>
            <input type="date" class="form-control" id="expenseDueDate" ng-model="me.expenseData.dueDate">
        </div>

        <button type="submit" class="btn btn-success">{{me.submitExpense}}</button>
    </form>*@

</div>

@section Scripts { 

<script src="~/js/app/services/houseService.js"></script>
<script src="~/js/app/services/houseMateService.js"></script>
<script src="~/js/app/services/expenseService.js"></script>

<script>
    (function () {
        "use strict";

        angular.module("app").controller("myHouseController", MyHouseController);
        //inject
        MyHouseController.$inject = ["houseService", "houseMateService", "expenseService"];

        function MyHouseController(houseService, houseMateService, expenseService) {

            var vm = this;

            vm.user = @Json.Serialize(Model.Item);
            vm.expenseTypes = ["Rent", "Bill", "Supply"]; //PunkHouseReal.Models.EnumsAndConstants.ExpenseType.Bill
            vm.house = [];

            //TODO: Move To AddExpense Modal
            vm.submitExpense = "Submit";
            vm.isDividedUnevenly = false;
            vm.unevenTotals = {};

            //TODO: Move to MyExpensesController
            vm.myExpenses = [];
            vm.expensesOwedMe = [];

            //click handlers
            vm.onAddExpenseClick = _onAddExpenseClick;

            //TODO: Move To AddExpense Modal
            vm.onCreateExpense = _onCreateExpense;

            //TODO: Move to MyExpensesController
            vm.onSeeMyExpensesClick = _onSeeMyExpensesClick;
            vm.onMarkPaidClick = _onMarkPaidClick;
            vm.onExpensesOwedClick = _onExpensesOwedClick;
            vm.onConfirmPaidClick = _onConfirmPaidClick;


            render();
            function render() {
                return getHouseExpenses().then(function () {
                    // logger?
                });
            }

            // -------------------- form submits ----------------------

            //TODO: Move to AddExpense Modal
            function _onCreateExpense() {

                //first check if expense is divided unevenly, and divided correctly
                var isDividedEvenly = angular.equals(vm.unevenTotals, {});
                if (!isDividedEvenly && !isCorrectSum(vm.expenseData.total, vm.unevenTotals)) {
                    //FIX ME with UI messaging
                    console.log("Sum is not equal to total expense value");
                    return;
                }
                //then build expense data object
                vm.expenseData.creatorId = vm.user.id;
                vm.expenseData.houseId = vm.user.houseId;
                vm.expenseData.unevenTotals = vm.unevenTotals;

                return createExpense(vm.expenseData).then(function (data) {
                    // logger?
                })
            }

            //--------------- click handlers ---------------------
            function _onAddExpenseClick() {
                //Open AddExpenseModal
            }

            //TODO: Move to MyExpensesController ------------------------
            function _onSeeMyExpensesClick() {
                var filtersData = {
                    isPaid: false
                };

                return getHouseMateExpenses(vm.user.id, filtersData)
                    .then(function (data) {
                        //logger?
                    });

            }

            //TODO: Move to MyExpensesController
            function _onMarkPaidClick(hme) {

                console.log(hme);

                if (!hme.isMarkedPaid) {
                    //FIX ME: this updates the UI before getting success from the server.... no bueno!
                    hme.isMarkedPaid = true;

                    return updateHouseMateExpense(vm.user.id, hme.expenseId, hme)
                        .then(function (data) {
                            // logger?
                        });
                }
            }

            //TODO: Move to MyExpenses Controller
            function _onExpensesOwedClick() {
                var filtersData = {
                    creatorId: vm.user.id,
                    isPaid: false
                }
                
                return getHouseMateExpensesOwed(vm.user.id, filtersData)
                    .then(function (data) {
                        // logger?
                    });
            }

            //TODO: Move to MyExpenses Controller
            function _onConfirmPaidClick(hme) {
                //FIX ME: Updates UI before success from server :/
                hme.isPaid = true;

                return updateHouseMateExpense(hme.houseMate.id, hme.expenseId, hme)
                    .then(function (data) {
                        //logger?
                    });

            }

            // ------------ helper functions ----------------

            //TODO: Move to AddExpense Modal
            function isCorrectSum(total, individualTotalsObj) {
                var sum = 0;
                for (var key in individualTotalsObj) {
                    var value = individualTotalsObj[key];
                    var valueAsInt = parseInt(value)
                    sum += valueAsInt;
                }
                return total == sum;
            }

            //--------------- service call functions ---------------

            //houseService
            function getHouseExpenses() {
                return houseService.getExpenses(vm.user.houseId)
                    .then(function (data) {
                        vm.house = data;
                        return vm.house;
                    });
            }


            //TODO: Move to MyExpensesController
            //houseMateService
            function getHouseMateExpenses(houseMateId, filtersData) {
                return houseMateService.getHouseMateExpenses(houseMateId, filtersData)
                    .then(function (data) {
                        vm.myExpenses = data;
                        return vm.myExpenses;
                    });
            }

            //TODO: Move to MyExpenses Controller
            //this seems non-DRY.... im making a whole other function to populate a different object returned from a different filter response..
            function getHouseMateExpensesOwed(houseMateId, filtersData) {
                return houseMateService.getHouseMateExpenses(houseMateId, filtersData)
                    .then(function (data) {
                        vm.expensesOwedMe = data;
                        return vm.expensesOwedMe;
                    });

            }

            //TODO: Move to MyExpenses Controller
            function updateHouseMateExpense(houseMateId, houseMateExpenseId, houseMateExpense) {
                return houseMateService.updateHouseMateExpense(houseMateId, houseMateExpenseId, houseMateExpense)
                    .then(function (data) {
                        return data;
                    });

            }

            //expenseService

            //TODO: Move to AddExpense Modal
            function createExpense(expenseData) {
                return expenseService.create(expenseData)
                    .then(function (data) {
                        return data;
                    });
            }

        }

     }());
</script>
}
